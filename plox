#!/usr/bin/env python3

import os
import sys
import stat
import argparse
import readline
from pprint import pprint
from os import path
from lib import ast
from lib.parser import Parser
from lib.scanner import Scanner
from lib.resolver import Resolver
from lib.interpreter import Interpreter
from lib.error import RuntimeError, CompileError, CompileErrors
from lib.dot_printer import ast_to_dot, ast_to_image

def main():
    parser = argparse.ArgumentParser(description="Welcome to Python LOX")
    parser.add_argument('file', nargs='?')
    parser.add_argument('--ast', nargs='?', const="image", choices=["image", "raw", "dot"], help="Print AST")
    parser.add_argument('--tokens', action='store_true', help="Print token stream")
    args = parser.parse_args()

    if args.file:
        code = read_file(args.file)

        result = run(code, print_ast=args.ast, print_tokens=args.tokens)

        if result == False:
            exit(1)

    else:
        # stdin is piped
        if stat.S_ISFIFO(os.fstat(0).st_mode):
            code = "".join(sys.stdin.readlines())

            result = run(code, print_ast=args.ast, print_tokens=args.tokens)

            if result == False:
                exit(1)
        else:
            run_repl()


def run(code, print_ast=None, print_tokens=False):
    try:
        tokens = Scanner(code).scan()

        if print_tokens:
            pprint(tokens)
            return

        ast = Parser(tokens).parse()

        if print_ast:
            if print_ast == "image":
                ast_to_image(ast)
            elif print_ast == "raw":
                print(ast)
            elif print_ast == "dot":
                print(ast_to_dot(ast))

            return

        bindings = Resolver(ast).run()

        Interpreter().interpret(ast, bindings)
    except (CompileErrors, RuntimeError) as error:
        print(error)
        return False

def read_file(name):
    if not path.exists(name):
        print("error: file [%s] does not exist" % name)
        exit(1)

    with open(name) as file:
        return file.read()

def run_repl():
    interpreter = Interpreter()

    while True:
        try:
            code = input(":: ")

            try:
                if Parser.is_expr(code):
                    node = ast.PrintStatement([Parser.parse_expr(code)])
                else:
                    node = Parser.parse_code(code)

                bindings = Resolver(node).run()

                interpreter.interpret(node, bindings)
            except (CompileErrors, RuntimeError) as error:
                print(error)

        # KeyboardInterrupt is <ctrl+c>
        # EOFError is <ctrl+d>
        except (KeyboardInterrupt, EOFError):
            break

if __name__ == "__main__":
    main()
